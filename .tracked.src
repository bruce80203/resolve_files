. .hard_coded.src
IFS=$(echo -en "\n\b") # change for loop seperator from space to end of line
local_location=${userhome}/resolve_files
host=`hostname`
param_file=${host}.chk_dirs.param
param_recs=`cat ${local_location}/${param_file} | egrep -v '^#'`
mount_location=/mnt/volume1
total_count=0

function ping_fileserver
{
    ping -c1 $storage_server >/dev/null
    if [ $? -eq 0 ]; then
        echo "ping successful, fileserver available"
    else
        echo "ping unsuccessful, looks like fileserver is not available"
        exit 1
    fi
}

function mount_file_system
{
    if mount | grep $mount_location > /dev/null; then
        echo "volume is already mounted"
    else
        echo "attemping to mount fileserver now"
        if [ ! -d $mount_location ]; then
            mkdir $mount_location
        fi
        mount $storage_server:/volume1 $mount_location
        if [ $? -eq 0 ]; then
            echo "mount is successful"
        else
            echo "mount unsuccessful"
            exit 1
        fi
    fi
}

function edit_parameters
{
    echo "opening parmeter file for editing"
    sleep 2
    vi ${local_location}/${param_file}
    param_recs=`cat ${local_location}/$param_file | egrep -v '^#'`
}

function umount_file_system
{
    umount $mount_location
    if [ $? -eq 0 ]; then
        echo "umount command successful"
    fi
}

function check_recs
{
    dirs=$(cat $param_file | cut -f1 -d\| | tr -d "\#")
    dirs=$dirs$'\n'$(cat $param_file | cut -f2 -d\|)
    for dir in $dirs; do
        if [ ! -e $dir ]; then
            echo "problem with $dir in $param_file"
            echo "directory does not exist comparison will not run"
            run_comparison=false
            break
        fi
    done
    copymain=$(cat $param_file | cut -f3 -d\|)
    for word in $copymain; do
        if ! [[ $word =~ copy|main ]]; then
            echo "copy or main word missing in $param_file"
            echo "$word not = copy or main"
            run_comparison=false
            break
        fi
    done
}

function directory_compare
{
    list_area=$1
    cut_num=`echo $list_area | wc -c | sed 's/ //g'`
    compare_area=$2
    prev_removed_dir=' '
    if [ ! -e $list_area ]; then
        echo "$list_area does not exist"
        exit 1
    fi
    find $list_area -type d > tmp.$$ # get directory list, including all subdirectories
    local_count=`wc -l tmp.$$ | awk '{print $1}'`
    echo "$local_count directories"
    ((total_count += local_count))
    while read dir_name_from_list; do # iterate using each directory name
        prev_removed_dir_char_count=`echo -n $prev_removed_dir | wc -c | sed 's/ //g'`
        compare_string_from_curr_rec=`echo $dir_name_from_list | cut -c1-$prev_removed_dir_char_count`
        if [[ $compare_string_from_curr_rec = $prev_removed_dir ]]; then # no need to remove subdirs since we have rm -rf parent dir
            continue
        fi
        tmp_dir=`echo $dir_name_from_list | cut -c$cut_num-`
        dirname_to_compare=${compare_area}${tmp_dir}
        if [[ ! -e $dirname_to_compare ]]; then
            rm -rf $dir_name_from_list
            echo "$dir_name_from_list is not on $compare_area and has been removed"
            prev_removed_dir=$dir_name_from_list
        fi
    done < tmp.$$
    rm tmp.$$
}

function file_compare
{
    list_area=$1
    cut_num=`echo $list_area | wc -c | sed 's/ //g'`
    compare_area=$2
    type=$3

    if [ ! -e $list_area ]; then
        echo "$list_area does not exist"
        exit 1
    fi

    if [ $ostype == redhat -o $ostype == debian -o $ostype == arch ]; then
        cptype=linux
    else
        cptype=mac
    fi


    if [ "$(ls -A $list_area)" ]; then
        find $list_area/* > tmp.$$ # get file list, including all subdirectories
        local_count=`wc -l tmp.$$ | awk '{print $1}'`
        echo "$local_count files"
        ((total_count += local_count))
        while read filename_from_list; do # iterate using each file name

            tmp_file_string=`echo $filename_from_list | cut -c$cut_num-`

            filename_to_compare=${compare_area}${tmp_file_string}

                if [[ -f $filename_from_list && ! -e $filename_to_compare && $type == main ]]; then
                    echo "copying $filename_from_list to $filename_to_compare file does not exist on copied area"
                    if [[ $cptype == linux ]]; then
                        cp --preserve=link,mode,timestamps $filename_from_list $filename_to_compare
                    elif [[ $cptype == mac ]]; then
                        cp -p $filename_from_list $filename_to_compare
                    else
                        echo "cptype not set correctly"
                        exit
                    fi
                    if [[ $2 == $local_area ]]; then # want chown run if we are writing local otherwise root owns file
                        chown $user:$group $filename_to_compare
                    fi
                fi

                if [[ -f $filename_from_list && ! -e $filename_to_compare && $type == copy ]]; then
                    echo "removing $filename_from_list since this is a copied area"
                    rm $filename_from_list
                fi

                if [[ -f $filename_from_list && $filename_from_list -nt $filename_to_compare ]]; then
                    echo "newer $filename_from_list replacing $filename_to_compare"
                    if [[ $cptype == linux ]]; then
                        cp --preserve=link,mode,timestamps $filename_from_list $filename_to_compare
                    elif [[ $cptype == mac ]]; then
                        cp -p $filename_from_list $filename_to_compare
                    else
                        echo "$cptype not set correctly"
                        exit
                    fi
                fi

                if [[ -f $filename_from_list && $filename_from_list -ot $filename_to_compare ]]; then
                    echo "replacing $filename_from_list because it is older than $filename_to_compare"
                    if [[ $cptype == linux ]]; then
                        cp --preserve=link,mode,timestamps $filename_to_compare $filename_from_list
                    elif [[ $cptype == mac ]]; then
                        cp -p $filename_to_compare $filename_from_list
                    else
                        echo "$cptype not set correctly"
                        exit
                    fi

                fi

                if [[ -d $filename_from_list && ! -e $filename_to_compare && $type == main ]]; then
                    echo "creating directory $filename_to_compare since it does not exist"
                    mkdir $filename_to_compare
                    if [[ $2 == $local_area ]]; then # want chown run if we are writing local otherwise root owns file
                        chown $user:$group $filename_to_compare
                    fi
                fi
        done < tmp.$$
        rm tmp.$$
    fi
}
